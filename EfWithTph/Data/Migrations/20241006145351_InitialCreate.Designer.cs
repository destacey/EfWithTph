// <auto-generated />
using System;
using EfWithTph.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfWithTph.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241006145351_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfWithTph.Models.BaseRoadmapItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("RoadmapId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoadmapId");

                    b.ToTable("RoadmapItems", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EfWithTph.Models.Roadmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Roadmaps", (string)null);
                });

            modelBuilder.Entity("EfWithTph.Models.RoadmapActivity", b =>
                {
                    b.HasBaseType("EfWithTph.Models.BaseRoadmapItem");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasColumnName("End");

                    b.Property<DateTime>("Start")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2")
                        .HasColumnName("Start");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EfWithTph.Models.RoadmapMilestone", b =>
                {
                    b.HasBaseType("EfWithTph.Models.BaseRoadmapItem");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2")
                        .HasColumnName("Start");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EfWithTph.Models.BaseRoadmapItem", b =>
                {
                    b.HasOne("EfWithTph.Models.RoadmapActivity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EfWithTph.Models.Roadmap", null)
                        .WithMany("Items")
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EfWithTph.Models.Roadmap", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EfWithTph.Models.RoadmapActivity", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
